datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

enum UserRole {
    ADMIN
    USER
}

model User {
    id           String    @id @default(cuid()) @map("_id")
    name         String?
    username     String?   @unique
    email        String?   @unique
    image        String? // image url
    password     String?
    role         UserRole  @default(USER)
    user_phone   String?
    user_address String?
    user_birth   DateTime?
    wage_rate    Float?    @default(1.0)
    user_deleted Boolean?  @default(false)
    user_status  Boolean?  @default(true)
    account      Account?
    createAt     DateTime  @default(now())
    updateAt     DateTime  @updatedAt
    //   Spending        Spending[]
    Order        Order[]
}

model Account {
    id                String   @id @default(cuid()) @map("_id")
    userId            String   @unique
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    acount_deleted    Boolean? @default(false)
    createAt          DateTime @default(now())
    updateAt          DateTime @updatedAt

    user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Product {
    product_id      String   @id @default(cuid()) @map("product_id")
    product_name    String
    product_price   Float?
    product_image   String?
    product_desc    String?
    product_type    String?
    product_status  Boolean? @default(true)
    product_deleted Boolean? @default(false)
    createAt        DateTime @default(now())
    updateAt        DateTime @updatedAt

    Product_Type Product_Type?  @relation(fields: [product_type], references: [product_type_id])
    Order_Detail Order_Detail[]
}

model Product_Type {
    product_type_id      String   @id @default(cuid()) @map("product_type_id")
    product_type_name    String
    product_type_desc    String?
    product_type_deleted Boolean? @default(false)

    createAt     DateTime  @default(now())
    updateAt     DateTime  @updatedAt
    product_list Product[]
}

model Table_Status {
    table_status_id      String   @id @default(cuid()) @map("table_status_id")
    table_status_name    String
    table_status_desc    String?
    table_status_deleted Boolean? @default(false)
    Table                Table[]
    createAt             DateTime @default(now())
    updateAt             DateTime @updatedAt
}

model Table {
    table_id      String   @id @default(cuid()) @map("table_id")
    table_name    String
    table_desc    String?
    table_status  String
    table_deleted Boolean? @default(false)
    createAt      DateTime @default(now())
    updateAt      DateTime @updatedAt

    Table_Status Table_Status? @relation(fields: [table_status], references: [table_status_id])
    Order        Order[]
}

model Customer {
    customer_id    String  @id @default(cuid()) @map("customer_id")
    customer_name  String
    customer_phone String?
    customer_point Int     @default(0)

    customer_deleted Boolean? @default(false)
    createAt         DateTime @default(now())
    updateAt         DateTime @updatedAt
    Order            Order[]
}

model Order {
    order_id       String         @id @default(cuid()) @map("_id")
    order_received Float?         @default(0)
    order_total    Float?
    order_note     String?
    order_deleted  Boolean?       @default(false)
    createAt       DateTime       @default(now())
    updateAt       DateTime       @updatedAt
    staff_id       String         @map("user_id")
    customer_id    String?        @map("customer_id")
    table_id       String?        @map("table_id")
    User           User?          @relation(fields: [staff_id], references: [id])
    Customer       Customer?      @relation(fields: [customer_id], references: [customer_id])
    Table          Table?         @relation(fields: [table_id], references: [table_id])
    Order_Detail   Order_Detail[]
}

model Order_Detail {
    productId String
    orderId   String
    price     Float
    quantity  Int

    product Product @relation(fields: [productId], references: [product_id])
    order   Order   @relation(fields: [orderId], references: [order_id])

    @@id([productId, orderId])
}
