datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

enum UserRole {
    ADMIN
    USER
}

model User {
    id           String                @id @default(cuid()) @map("_id")
    name         String?
    username     String?               @unique
    email        String?               @unique
    image        String? // image url
    password     String?
    role         UserRole              @default(USER)
    position     String?
    user_phone   String?
    user_address String?
    user_birth   DateTime?
    wage_rate    Float?                @default(1.0)
    user_deleted Boolean?              @default(false)
    user_status  Boolean?              @default(true)
    account      Account?
    createAt     DateTime              @default(now())
    updateAt     DateTime              @updatedAt
    Order        Order[]
    Spending     Spending[]
    Exchange     HistoryGiftExchange[]
    Position     Position?             @relation(fields: [position], references: [position_id])
}

model Account {
    id                String   @id @default(cuid()) @map("_id")
    userId            String   @unique
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    acount_deleted    Boolean? @default(false)
    createAt          DateTime @default(now())
    updateAt          DateTime @updatedAt

    user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Product {
    product_id      String   @id @default(cuid()) @map("product_id")
    product_name    String
    product_price   Float?
    product_image   String?
    product_desc    String?
    product_type    String?
    product_status  Boolean? @default(true)
    product_deleted Boolean? @default(false)
    createAt        DateTime @default(now())
    updateAt        DateTime @updatedAt

    Product_Type Product_Type?  @relation(fields: [product_type], references: [product_type_id])
    Order_Detail Order_Detail[]
}

model Position {
    position_id      String   @id @default(cuid()) @map("position_id")
    position_name    String
    position_desc    String?
    position_deleted Boolean? @default(false)
    createAt         DateTime @default(now())
    updateAt         DateTime @updatedAt
    User             User[]
}

model Product_Type {
    product_type_id      String   @id @default(cuid()) @map("product_type_id")
    product_type_name    String
    product_type_desc    String?
    product_type_deleted Boolean? @default(false)

    createAt     DateTime  @default(now())
    updateAt     DateTime  @updatedAt
    product_list Product[]
}

model Customer {
    customer_id    String  @id @default(cuid()) @map("customer_id")
    customer_name  String
    customer_phone String?
    customer_point Int     @default(0)

    customer_deleted    Boolean?              @default(false)
    createAt            DateTime              @default(now())
    updateAt            DateTime              @updatedAt
    Order               Order[]
    HistoryGiftExchange HistoryGiftExchange[]
}

model Order {
    order_id           String         @id @default(cuid()) @map("_id")
    order_received     Float          @default(0)
    order_total        Float
    order_note         String?
    order_deleted      Boolean?       @default(false)
    createAt           DateTime       @default(now())
    updateAt           DateTime       @updatedAt
    staff_id           String         @map("user_id")
    customer_id        String?        @map("customer_id")
    customer_old_point Int
    User               User?          @relation(fields: [staff_id], references: [id])
    Customer           Customer?      @relation(fields: [customer_id], references: [customer_id])
    Order_Detail       Order_Detail[]
}

model Order_Detail {
    productId String
    orderId   String
    price     Float
    quantity  Int
    createAt  DateTime @default(now())
    updateAt  DateTime @updatedAt
    product   Product  @relation(fields: [productId], references: [product_id])
    order     Order    @relation(fields: [orderId], references: [order_id])

    @@id([productId, orderId])
}

model Spending {
    spending_id      String   @id @default(cuid()) @map("spending_id")
    spending_name    String
    spending_price   Float
    spending_staff   String
    spending_desc    String?
    spending_deleted Boolean? @default(false)
    createAt         DateTime @default(now())
    updateAt         DateTime @updatedAt
    staff            User?    @relation(fields: [spending_staff], references: [id])
}

model Gift {
    gift_id             String                @id @default(cuid()) @map("gift_id")
    gift_name           String
    gift_price          Float
    gift_image          String?
    gift_desc           String?
    gift_deleted        Boolean?              @default(false)
    createAt            DateTime              @default(now())
    updateAt            DateTime              @updatedAt
    HistoryGiftExchange HistoryGiftExchange[]
}

model HistoryGiftExchange {
    history_id      String   @id @default(cuid()) @map("history_id")
    giftId          String
    customerId      String
    staffId         String
    exchange_point  Int
    history_deleted Boolean? @default(false)
    createAt        DateTime @default(now())
    updateAt        DateTime @updatedAt

    staff    User     @relation(fields: [staffId], references: [id])
    gift     Gift     @relation(fields: [giftId], references: [gift_id])
    customer Customer @relation(fields: [customerId], references: [customer_id])
}
